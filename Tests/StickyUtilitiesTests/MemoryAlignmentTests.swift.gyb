///
///  MemoryAlignmentTests.swift
///
///  Copyright 2017 Tony Stone
///
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///
///  http://www.apache.org/licenses/LICENSE-2.0
///
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.
///
///  Created by Tony Stone on 10/12/17.
///
import XCTest

import StickyUtilities

/// =================================== NOTICE ========================================
/// Do NOT edit this file directly as it will be regenerated automatically when needed.
///
/// Modify the  *.swift.gyb file instead.
/// ===================================================================================

///
/// Struct `SimpleStruct`
///
/// Internal test structure.
///
fileprivate struct SimpleStruct {
    var boolVar: Bool
}

///
/// Struct `UnpackedStruct`
///
/// Internal test structure.
///
fileprivate struct UnpackedStruct {
	var boolVar: Bool
	var intVar: Int
	var doubleVar: Double
	var stringVar: String
}
%{
    variants = [
       ("Bool",           [("0", "0"), ("1", "1"), ("2", "2"), ("3", "3"), ("4", "4"), ("5", "5"), ("6", "6"), ("7", "7"), ("8", "8"), ("9", "9"), ("13", "13"), ("17", "17")]),
       ("Int",            [("0", "0"), ("1", "8"), ("2", "8"), ("3", "8"), ("4", "8"), ("5", "8"), ("6", "8"), ("7", "8"), ("8", "8"), ("9", "16"), ("13", "16"), ("17", "24")]),
       ("Int8",           [("0", "0"), ("1", "1"), ("2", "2"), ("3", "3"), ("4", "4"), ("5", "5"), ("6", "6"), ("7", "7"), ("8", "8"), ("9", "9"), ("13", "13"), ("17", "17")]),
       ("Int16",          [("0", "0"), ("1", "2"), ("2", "2"), ("3", "4"), ("4", "4"), ("5", "6"), ("6", "6"), ("7", "8"), ("8", "8"), ("9", "10"), ("13", "14"), ("17", "18")]),
       ("Int32",          [("0", "0"), ("1", "4"), ("2", "4"), ("3", "4"), ("4", "4"), ("5", "8"), ("6", "8"), ("7", "8"), ("8", "8"), ("9", "12"), ("13", "16"), ("17", "20")]),
       ("Int64",          [("0", "0"), ("1", "8"), ("2", "8"), ("3", "8"), ("4", "8"), ("5", "8"), ("6", "8"), ("7", "8"), ("8", "8"), ("9", "16"), ("13", "16"), ("17", "24")]),
       ("Float",          [("0", "0"), ("1", "4"), ("2", "4"), ("3", "4"), ("4", "4"), ("5", "8"), ("6", "8"), ("7", "8"), ("8", "8"), ("9", "12"), ("13", "16"), ("17", "20")]),
       ("Double",         [("0", "0"), ("1", "8"), ("2", "8"), ("3", "8"), ("4", "8"), ("5", "8"), ("6", "8"), ("7", "8"), ("8", "8"), ("9", "16"), ("13", "16"), ("17", "24")]),
       ("SimpleStruct",   [("0", "0"), ("1", "1"), ("2", "2"), ("3", "3"), ("4", "4"), ("5", "5"), ("6", "6"), ("7", "7"), ("8", "8"), ("9", "9"), ("13", "13"), ("17", "17")]),
       ("UnpackedStruct", [("0", "0"), ("1", "8"), ("2", "8"), ("3", "8"), ("4", "8"), ("5", "8"), ("6", "8"), ("7", "8"), ("8", "8"), ("9", "16"), ("13", "16"), ("17", "24"), ("49", "56")]),
    ]
}%
%  for (Type, Tests) in variants:

///
/// Test the memory alignment functions with type `${Type}`
///
class MemoryAlignment${Type}Tests: XCTestCase {
% for (Offset, Expected) in Tests:

    func testAlignOffset${Offset}To${Type}() {
        XCTAssertEqual(align(offset: ${Offset}, to: ${Type}.self), ${Expected})
    }
% end
}
% end
